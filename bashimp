#!/usr/bin/env bash
###################
# BASHimp - BASH Script Initializer and Option Parser
#
# @author   RuneImp <runeimp@gmail.com>
# @version  0.8.0
# @license  http://opensource.org/licenses/MIT
###
# Installation
# ------------
# 1. bashimp must be in your path and executable.
# 
###
# ChangeLog:
# ----------
# 2015-06-16    v0.8.0		Added setup command so BASHimp could create the
#                           default user's config and make sure bashimp exists
#                           in the user's PATH. Updated bashimp_script_create's
#                           template.
# 2015-06-15    v0.7.0      Added copy command so BASHimp could copy itself or
#                           another script into the user's bin.
# 2015-06-14    v0.6.0      Initial version with a working OPTIONimp mode.
# 2015-06-12    v0.5.0      Beginnings of OPTIONimp AKA BASHimp Beast Mode!
# 2015-06-09    v0.4.0      Now does extensive checking for your prefered editor
#                           if one wasn't specified in your bashimp.cfg.
# 2015-06-08    v0.3.0      Added the find command. Added the -f and --find, -i
#                           and --interpreter, and -p and --posix switches.
#                           Added the loading of a user configuration file.
#                           Updated help.
# 2015-06-07    v0.2.0      Added expunge to the command list
# 2015-06-07    v0.1.0      Initial script creation
# 
###
# ToDo:
# -----
# [ ] Add functionality for extended option parsing
#

BASHIMP_AS_OPTIMP=`basename "$0"`
BASHIMP_AUTHOR=""
BASHIMP_ADMIN_MODE=false
BASHIMP_COPY=""
BASHIMP_EDITOR=""
BASHIMP_END_OPTIONS=false
BASHIMP_INIT=""
BASHIMP_INTERPRETER="/usr/bin/env bash"
BASHIMP_LICENSES=""
BASHIMP_KILL=""
BASHIMP_PATH="$HOME/bin"
BASHIMP_PROMPT_PREFIX="  "
BASHIMP_SETUP=""

#
# Setup version info and help defaults
#
if [ "$BASHIMP_AS_OPTIMP" == 'bashimp' ]; then
	BASHIMP_SELF="$0"
	BASHIMP_VER_NUMBER='0.8.0'
	BASHIMP_VER_LABEL="BASHimp v$BASHIMP_VER_NUMBER"
	BASHIMP_AS_OPTIMP=false
else
	if [ -z "$BASHIMP_HELP" ]; then
		if [ -z "$BASHIMP_VER_LABEL" ]; then
			[ -z "$BASHIMP_VER_NUMBER" ] && BASHIMP_VER_NUMBER='0.0.0'
			BASHIMP_VER_LABEL="$BASHIMP_AS_OPTIMP v$BASHIMP_VER_NUMBER"
		fi
		BASHIMP_HELP="$BASHIMP_VER_LABEL"
	fi
	BASHIMP_AS_OPTIMP=true
fi

#
# Load the BASHimp user config file if exists and is readable
#
[ -r "${HOME}/.config/bashimp.cfg" ] && source "${HOME}/.config/bashimp.cfg"

#
# BASHimp Codes
#
if [ -z "$BASHIMP_ERRORS" ]; then
	read -r -d '' BASHIMP_ERRORS <<-EOD
	$BASHIMP_VER_LABEL

	Error Codes:
	 1 = No options provided
	 2 = Unknown option
	 3 = Option missing value argument
	 4 = File not found (to delete)
	 5 = No text editor found
	 6 = Bad line in OPTIONIMP_CONF configuration
	 7 = Bad option variable type in OPTIONIMP_CONF
	 8 = Unknown option argument type
	 9 = No source path provided to search in
	10 = The bin path BASHimp was looking for was not in your PATH
EOD
fi

#
# BASHimp Help
#
if [ -z "$BASHIMP_HELP" ]; then
	read -r -d '' BASHIMP_HELP <<-EOD
	$BASHIMP_VER_LABEL

	bashimp [OPTIONS]

	  Commands:
	  	copy SCRIPT_NAME                Copy the named script into the user's bin.
	  	copy self                       Copy BASHimp into the user's bin.
	    code                            Display exit codes.
	    find INTERPRETER_NAME           Display a local path for the specified
	                                    interpreter name.
	    help                            Display this help.
	    init SCRIPT_NAME                Initialize the named BASH script.
	    kill SCRIPT_NAME                Expunge the named BASH script.
	                                    Will ask for verification.
	    setup                           Setup the user's config file and make sure bashimp is in the user's path

	  Options:
	    -a, --admin                     Use Admin/Multi-User path.
	    -e, --env INTERPRETER_NAME      Use specified interpreter name after
	                                    /usr/bin/env when initializing the script.
	    -f, --find INTERPRETER_NAME     Find a local path for the specified
	                                    interpreter name and use it when
	                                    initializing the script.
	    -h, --help                      Display this help.
	    -i, --interpreter               Specify the full path for initializing the interpreter.
	    -p, --posix                     Find a POSIX compliant interpreter and use it's path when
	                                    initializing the script.
	    -v, --version                   Print out BASHimp version.

	Be sure to source this script for robust option parsing!
EOD
fi

if [ -n "$OPTIONIMP_CONF" ]; then
	# printf "\$OPTIONIMP_CONF:\n%s\n\n" "$OPTIONIMP_CONF"

	unset OPTIONIMP_OPTION_NAMES
	declare -a OPTIONIMP_OPTION_NAMES
	declare -a OPTIONIMP_ARGUMENTS
	while read -r line
	do
		# echo "\$line: $line"
		if [[ "$line" =~ ([[:alpha:],_ -]+)[[:blank:]]+\$([[:alpha:]_]+)[[:blank:]]+([[:alpha:]]+)[[:blank:]]+(.+) ]]; then
			# echo "\${BASH_REMATCH[1]}: '${BASH_REMATCH[1]}' -- \${BASH_REMATCH[2]}: '${BASH_REMATCH[2]}' -- \${BASH_REMATCH[3]}: '${BASH_REMATCH[3]}' -- \${BASH_REMATCH[4]}: '${BASH_REMATCH[4]}'"
			optvar_name="${BASH_REMATCH[2]}"
			optvar_type="${BASH_REMATCH[3]}"

			shopt -s nocasematch
			case "$optvar_type" in
				r | req | required)
					optvar_type=required
					;;
				o | opt | optional)
					optvar_type=optional
					;;
				b | bool | boolean)
					optvar_type=boolean
					;;
				*)
					echo "Bad option variable type: ${optvar_type}" 1>&2
					exit 7
					;;
			esac
			shopt -u nocasematch

			while IFS=', ' read -r -a options; do
				for option_name in "${options[@]}"; do
					case "$option_name" in
						--*)
							option_name=${option_name:2}
							option_type='long switch'
							;;
						-*)
							option_name=${option_name:1}
							option_type='short switch'
							;;
						 *)
							option_type='command'
							;;
					esac
					OPTIONIMP_OPTION_DOCS=( "${OPTIONIMP_OPTION_DOCS[@]}" "${line}" )
					OPTIONIMP_OPTION_NAMES=( "${OPTIONIMP_OPTION_NAMES[@]}" "${option_name}" )
					OPTIONIMP_OPTION_TYPES=( "${OPTIONIMP_OPTION_TYPES[@]}" "${option_type}" )
					OPTIONIMP_OPTVAR_NAMES=( "${OPTIONIMP_OPTVAR_NAMES[@]}" "${optvar_name}" )
					OPTIONIMP_OPTVAR_TYPES=( "${OPTIONIMP_OPTVAR_TYPES[@]}" "${optvar_type}" )
				done
				
			done <<< "${BASH_REMATCH[1]}"
		else
			echo "Bad OPTIONIMP_CONF configuration line: $line" 1>&2
			exit 6
		fi
	done <<< "$OPTIONIMP_CONF"
fi

##
# BASHimp Functions
#

###
# Find a value in an array and return it's index
#
# === Arguments ===
#
# +$1+ The array to search
# +$2+ The value to match
#
# === Returns ===
#
# +0 + = No match. Value not found in array.
# +1\++ = Match found at returned index - 1.
#
bashimp_array_find()
{
	local array=("${!1}")
	local count=${#array[@]}
	local value="$2"
	local i=1
	local item
	if [ -n "$value" ]; then
		# echo "bashimp_array_find() -- \${array[@]}: ${array[@]} -- \$count: $count -- \${value}: '${value}'"
		for item in "${array[@]}"
		do
			# echo "bashimp_array_find() -- \${item}: ${item} -- \$i: $i"
			if [ "$item" == "$value" ]; then
				return $i
			fi
			let "i += 1"
		done
	fi

	return 0
}

bashimp_doc_show()
{
	echo "$1"
	echo
}

bashimp_function_exists()
{
	declare -f "$1" > /dev/null
	return $?
}

bashimp_help()
{
	bashimp_doc_show "$BASHIMP_HELP"
}


bashimp_input_yesno()
{
	promp="$1"
	yes="$2"
	no="$3"

	read -r -p "${BASHIMP_PROMPT_PREFIX}${promp} [yes/NO] (n) " response

	shopt -s nocasematch
	if [[ "$response" =~ ^(y|yes)$ ]]; then
		[ -n "$yes" ] && echo "$yes"
		result=0
	else
		[ -n "$no" ] && echo "$no"
		result=1
	fi
	shopt -u nocasematch

	return $result
}


optionimp_optvar_type()
{
	if [ -n "${OPTIONIMP_OPTVAR_TYPES[$1]}" ]; then
		echo "${OPTIONIMP_OPTVAR_TYPES[$1]}"
	else
		echo 'unknown'
	fi
}

optionimp_option_check()
{
	local option="$1"
	local optarg="$2"
	if [[ "$option" =~ [[:space:]]*([[:alpha:]_-]+)[[:space:]]* ]]; then
		option="${BASH_REMATCH[1]}"
	fi
	bashimp_array_find OPTIONIMP_OPTION_NAMES[@] "$option"
	index=$?
	if [ $index -gt 0 ]; then
		let "index -= 1"
	else
		# echo "Unknown option: '$option'"
		# exit 2
		OPTIONIMP_ARGUMENTS=( "${OPTIONIMP_ARGUMENTS[@]}" "${option}" )
		return 0
	fi

	optvar_type=$(optionimp_optvar_type $index)
	# echo "optionimp_option_check() -- \$option: '$option' -- \$optarg: '$optarg' -- \$optvar_type: '$optvar_type'"

	local result=0

	case "$optvar_type" in
		required)
			opt_type=$(optionimp_option_type "$optarg")
			if [ "${opt_type}" == 'NON_SWITCH' ]; then
				eval ${OPTIONIMP_OPTVAR_NAMES[$index]}'="'${optarg}'"'
			else
				case "${OPTIONIMP_OPTION_TYPES[$index]}" in
					'long switch')
						option_name="--${OPTIONIMP_OPTION_NAMES[$index]}"
						;;
					'short switch')
						option_name="-${OPTIONIMP_OPTION_NAMES[$index]}"
						;;
					'command')
						option_name="${OPTIONIMP_OPTION_NAMES[$index]}"
						;;
				esac
				echo "Option argument for ${option_name} is required" 1>&2
				exit 3
			fi
			result=1
			;;
		optional)
			opt_type=$(optionimp_option_type "$optarg")
			if [ "${opt_type}" == 'NON_SWITCH' ]; then
				eval ${OPTIONIMP_OPTVAR_NAMES[$index]}'="'${optarg}'"'
				result=1
			else
				eval ${OPTIONIMP_OPTVAR_NAMES[$index]}'=true'
			fi
			;;
		boolean)
			eval "${OPTIONIMP_OPTVAR_NAMES[$index]}=true"
			;;
		*)
			echo "Unknown argument type: ${optvar_type}" 1>&2
			# exit 8
			OPTIONIMP_ARGUMENTS=( "${OPTIONIMP_ARGUMENTS[@]}" "${optarg}" )
			;;
	esac

	return $result

	# echo "Found ${OPTIONIMP_OPTION_TYPES[$index]} match for \$${OPTIONIMP_OPTVAR_NAMES[$index]} (${arg_type}) [${index}]"
}

optionimp_option_type()
{
	local tmp="$1"
	if [ -n "$tmp" ]; then
		case "${tmp:0:1}" in
		-)
			if [ "${tmp:0:2}" == '--' ]; then
				if [ ${#tmp} -eq 2 ]; then
					echo 'END_OF_OPTIONS'
				else
					echo 'LONG_SWITCH'
				fi
			else
				if [ ${#tmp} -eq 1 ]; then
					echo 'STD_INPUT'
				else
					echo 'SHORT_SWITCH'
				fi
			fi
			;;
		*)
			echo 'NON_SWITCH'
			;;
		esac
	else
		echo 'EMPTY_NULL'
	fi
}

optionimp_option_required()
{
	# echo "optionimp_option_required() $1"
	if [ $1 -lt 2 ]; then
		echo "echo '  Missing value argument' 1>&2 && exit 3"
	else
		echo "shift 2"
	fi
}

bashimp_path_in_path()
{
	local result=1
	# echo "bashimp_path_in_path() -- \$1: $1 -- \$PATH: $PATH"
	if [ -z "$1" ]; then
		echo "bashimp_path_in_path() No source path provided to search in" 1>&2
		exit 9
	elif [[ ":${PATH}:" == *":$1:"* ]]; then
		# echo "bashimp_path_in_path() Found source path"
		result=0
	fi

	return $result
}

bashimp_script_copy()
{
	local src_file="$1"
	local script_name=$(basename "$src_file")
	local dirname=$(dirname "$src_file")
	local destination="${BASHIMP_PATH}/${script_name}"

	[ "$dirname" == '.' ] && src_file="$(pwd)/${script_name}"

	# echo "bashimp_script_copy() \$src_file: $src_file"
	# echo "bashimp_script_copy() \$dirname: $dirname"
	# echo "bashimp_script_copy() \$destination: $destination"

	if [ -f "${destination}" ]; then
		bashimp_input_yesno "A file already exists at that location. Do you want to overwrite it?" "Overwriting $destination" "Another time maybe..."
		if [ $? -eq 0 ]; then
			$(which cp) "${src_file}" "${destination}" # Using subcommand to make sure cp isn't aliased with -i
		else
			exit 0
		fi
	else
		cp "${src_file}" "${destination}"
	fi
}

bashimp_script_create()
{
	exec 3<&1
	exec > "${BASHIMP_PATH}/${BASHIMP_INIT}"
	echo "#!${BASHIMP_INTERPRETER}"
	echo "###################"
	echo "# ${BASHIMP_INIT} v0.1.0"
	echo "#"
	[ -n "${BASHIMP_AUTHOR}" ] && echo "# @author ${BASHIMP_AUTHOR}"
	[ -n "${BASHIMP_LICENSES}" ] && echo "# @licenses ${BASHIMP_LICENSES}"
	echo "#"
	echo "#"
	echo
	echo
	exec 1<&3 3<&-
}

bashimp_shell_find()
{
	shopt -s nocasematch

	case "$1" in
		POSIX)
			if [ -n "$(which bash)" ]; then
				BASHIMP_INTERPRETER="$(which bash)"
			elif [ -n "$(which ksh)" ]; then
				BASHIMP_INTERPRETER="$(which ksh)"
			elif [ -n "$(which posh)" ]; then
				BASHIMP_INTERPRETER="$(which posh)"
			elif [ -x '/usr/xpg4/bin/sh' ]; then
				BASHIMP_INTERPRETER='/usr/xpg4/bin/sh'
			elif [ -n "$(which dash)" ]; then
				BASHIMP_INTERPRETER="$(which dash)"
			elif [ -n "$(which sh)" ]; then
				BASHIMP_INTERPRETER="$(which sh)"
			else
				BASHIMP_INTERPRETER='/bin/sh'
			fi
			;;
		*)
			if [ -n "$(which "$1")" ]; then
				BASHIMP_INTERPRETER="$(which "$1")"
			else
				BASHIMP_INTERPRETER='/bin/sh'
			fi
			;;
	esac

	shopt -u nocasematch
}

# BASHimp Function Aliases
shopt -s expand_aliases  # Enables alias expansion.

bashimp_function_exists agree
if [ $? -eq 0 ]; then
	alias agree="bashimp_input_yesno"
fi


#
# Option Parsing for OPTIONimp or BASHimp
#
if [ $BASHIMP_AS_OPTIMP == true ]; then

	##
	# echo "OPTIONimp Loop"
	#
	until [ -z "$1" ]
	do
		case "$1" in
			-h | --help)
				bashimp_doc_show "$BASHIMP_HELP"
				exit 0
				;;
			-v | --version)
				echo $BASHIMP_VER_LABEL
				exit 0
				;;
			--) # End of options
				BASHIMP_END_OPTIONS=true
				shift
				break
				;;
			--*)
				switch_name="${1:2}"
				optionimp_option_check "${switch_name}" "$2"

				if [ $? == 0 ]; then
					shift
				else
					shift
					shift
				fi
				;;
			-*)
				switch_name="${1:1}"
				len=${#switch_name}
				declare -a switch_list
				for ((i=0; i < $len; i++))
				do
					switch_list[$i]="${switch_name:$i:1}"
					optionimp_option_check "${switch_name:$i:1}" "$2"
					result_tmp=$?
					if [ -z "$result" ] || [ $result == 0 ]; then
						result=$result_tmp
					fi
				done

				if [ $result == 0 ]; then
					shift
				else
					shift
					shift
				fi
				;;
			*)
				optionimp_option_check "$1" "$2"
				if [ $? == 0 ]; then
					shift
				else
					shift
					shift
				fi
				;;
		esac
	done # until [ -z "$1" ]

	##
	# Make sure boolean option variables are set false if not defined
	#
	len=${#OPTIONIMP_OPTVAR_NAMES[@]}

	for i in $(eval echo "{0..$len}"); do
		optvar_name="${OPTIONIMP_OPTVAR_NAMES[$i]}"
		optvar_type="${OPTIONIMP_OPTVAR_TYPES[$i]}"
		eval "value=\$${optvar_name}"
		if [ -z "$value" ] && [ "$optvar_type" == 'boolean' ]; then
			eval "${optvar_name}=false"
		fi
	done
else

	##
	# echo 'BASHimp Loop'
	#
	old_case=$(shopt nocasematch)
	shopt -s nocasematch

	until [ -z "$1" ]
	do
		case "$1" in
			codes | errors | code)
				bashimp_doc_show "$BASHIMP_ERRORS"
				exit 0
				;;
			cp | copy)
				BASHIMP_COPY="$2"
				eval "$(optionimp_option_required $#)"
				;;
			create | add | init)
				BASHIMP_INIT="$2"
				eval "$(optionimp_option_required $#)"
				;;
			delete | rem | kill | expunge)
				BASHIMP_KILL="$2"
				eval "$(optionimp_option_required $#)"
				;;
			find)
				bashimp_shell_find $2
				# echo "${BASHIMP_INTERPRETER}"
				eval "$(optionimp_option_required $#)"
				;;
			setup)
				# echo 'BASHimp Setup'
				BASHIMP_SETUP=true
				shift
				;;
			-a | --admin) # Admin Mode. Setup script for all users
				BASHIMP_ADMIN_MODE=true
				shift
				;;
			-e | --env)
				BASHIMP_INTERPRETER="/usr/bin/env $2"
				eval "$(optionimp_option_required $#)"
				;;
			-f | --find)
				bashimp_shell_find $2
				eval "$(optionimp_option_required $#)"
				;;
			help | -h | --help)
				bashimp_doc_show "$BASHIMP_HELP"
				exit 0
				;;
			-i | --interpreter)
				BASHIMP_INTERPRETER="$2"
				eval "$(optionimp_option_required $#)"
				;;
			-p | --posix)
				bashimp_shell_find 'POSIX'
				shift
				;;
			-v | --version)
				echo $BASHIMP_VER_LABEL
				exit 0
				;;
			--) # End of options
				shift
				break
				;;
			*)
				echo "Unknown option: $1" 1>&2
				exit 2
				;;
		esac
	done # until [ -z "$1" ]

	if [[ "$old_case" =~ nocasematch.+off ]]; then
		shopt -u nocasematch
	fi
fi


# Update Path if in Admin/Multi-User Mode
if [ $BASHIMP_ADMIN_MODE == true ]; then
	if [ -d '/usr/local/bin' ]; then
		BASHIMP_PATH='/usr/local/bin' # The standard for multi-user scripts, no?
	elif [ -d '/usr/local/opt' ]; then
		BASHIMP_PATH='/usr/local/opt' # @see http://www.extellisys.com/articles/usr-local-opt
	elif [ -d '/opt/bin' ]; then
		BASHIMP_PATH='/opt/bin'       # I've seen this used somewhere...
	else
		BASHIMP_PATH='/usr/local/bin' # Create this if nothing else exists
	fi
fi


#
# Do some work
#
if [ -n "$BASHIMP_COPY" ]; then

	if [ "$BASHIMP_COPY" == 'self' ]; then
		bashimp_script_copy "$BASHIMP_SELF"
	else
		bashimp_script_copy "$BASHIMP_COPY"
	fi

elif [ -n "$BASHIMP_INIT" ]; then

	# Create bin directory if it doesn't already exist
	if [ ! -d "$BASHIMP_PATH" ]; then
		mkdir -p "$BASHIMP_PATH"
	fi

	# Create script or ask if it already exists
	if [ ! -f "${BASHIMP_PATH}/$BASHIMP_INIT" ]; then
		bashimp_script_create
	else
		
		bashimp_input_yesno "The file $BASHIMP_INIT already exists. Do you wish to continue?" "Overwriting $BASHIMP_INIT" "Another time maybe..."
		if [ $? -eq 0 ]; then
			echo "Overwriting $BASHIMP_INIT"
			bashimp_script_create
		else
			exit 0
		fi

	fi

	# Fix permissions if not already executable
	if [ -f "${BASHIMP_PATH}/$BASHIMP_INIT" ] && [ ! -x "${BASHIMP_PATH}/$BASHIMP_INIT" ]; then
		chmod u+x "${BASHIMP_PATH}/$BASHIMP_INIT"
	fi

	# Choose script in editor if none defined
	if [ -z "${BASHIMP_EDITOR}" ]; then
		if [ -n "$VISUAL" ]; then
			BASHIMP_EDITOR="$VISUAL"
		elif [ -n "$GIT_EDITOR" ]; then
			BASHIMP_EDITOR="$GIT_EDITOR"
		elif [ -n "$EDITOR" ]; then
			BASHIMP_EDITOR="$EDITOR"
		elif [ -n "`which subl`" ]; then
			BASHIMP_EDITOR=`which subl`
		else
			BASHIMP_EDITOR=`which vi`
		fi
	fi

	# Launch script in editor
	if [ -n "${BASHIMP_EDITOR}" ]; then
		"${BASHIMP_EDITOR}" "${BASHIMP_PATH}/${BASHIMP_INIT}"
	else
		echo "No BASHIMP_EDITOR defined or found." 1>&2
		exit 5
	fi

elif [ -n "$BASHIMP_KILL" ]; then

	# Update Init Path if in Admin/Multi-User Mode
	if [ $BASHIMP_ADMIN_MODE == true ]; then
		if [ -d '/usr/local/bin' ]; then
			BASHIMP_PATH='/usr/local/bin' # The standard for multi-user scripts, no?
		elif [ -d '/usr/local/opt' ]; then
			BASHIMP_PATH='/usr/local/opt' # @see http://www.extellisys.com/articles/usr-local-opt
		elif [ -d '/opt/bin' ]; then
			BASHIMP_PATH='/opt/bin'       # I've seen this used somewhere...
		else
			BASHIMP_PATH='/usr/local/bin' # Create this if nothing else exists
		fi
	fi

	# Expunge script
	if [ -f "${BASHIMP_PATH}/${BASHIMP_KILL}" ]; then
		bashimp_input_yesno "Are you sure you want to expunge $BASHIMP_KILL from this computer" "Expunging ${BASHIMP_PATH}/${BASHIMP_KILL}" "Another time maybe..."
		if [ $? -eq 0 ]; then
			rm "${BASHIMP_PATH}/${BASHIMP_KILL}"
		fi
	else
		echo "File not found"
		echo "Expected to find the script at ${BASHIMP_PATH}/${BASHIMP_KILL}"
		exit 4
	fi

elif [ -n "$BASHIMP_SETUP" ]; then
	

	bashimp_path_in_path "$BASHIMP_PATH"
	if [ $? -ne 0 ]; then
		echo "Setup found BASHIMP_PATH missing from your PATH" 1>&2
		exit 10
	# else
	# 	echo "Setup found BASHIMP_PATH within your PATH"
	fi

	if [ ! -d "${HOME}/.config" ]; then
		bashimp_input_yesno "The directory ${HOME}/.config was not found. Shall I create it for you?" "" "Another time maybe..."
		if [ $? -eq 0 ]; then
			mkdir -p "${HOME}/.config"
		else
			exit 0
		fi
	fi # end if [ ! -d "${HOME}/.config" ]

	if [ -f "${HOME}/.config/bashimp.cfg" ]; then
		bashimp_input_yesno "The file ${HOME}/.config/bashimp.cfg was found. Shall I overwrite it for you?" "" "Another time maybe..."
		if [ $? -eq 0 ]; then
			echo "Overwriting ${HOME}/.config/bashimp.cfg"
		else
			exit 0
		fi
	else
		echo "Creating ${HOME}/.config/bashimp.cfg"
	fi

fi





