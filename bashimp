#!/usr/bin/env bash
###################
# BASHimp - BASH Script Initializer
#
# @author   RuneImp <runeimp@gmail.com>
# @version  0.2.0
# @license  http://opensource.org/licenses/MIT
###
# Installation
# ------------
# 1. bashimp must be in your path and executable.
# 
###
# ChangeLog:
# ----------
# 2015-06-07	v0.2.0      Added expunge to the command list
# 2015-06-07	v0.1.0      Initial script creation
#

BASHIMP_ADMIN_MODE=false
BASHIMP_INIT=""
BASHIMP_PATH="$HOME/bin"
BASHIMP_KILL=""
BASHIMP_VER_NUMBER='0.2.0'
BASHIMP_VER_LABEL="BASHimp v$BASHIMP_VER_NUMBER"

#
# BASHimp Codes
#
BASHIMP_ERRORS=`cat <<BASHIMPOED
$BASHIMP_VER_LABEL

Error Codes:
 1 = No options provided
 2 = Unknown option
 3 = Option missing value argument
 4 = File not found (to delete)
 
BASHIMPOED`


#
# BASHimp Help
#
BASHIMP_HELP=`cat <<BASHIMPOED
$BASHIMP_VER_LABEL

bashimp [OPTIONS]

  Commands:
    help                                        Display this help
    codes | errors                              Display error codes
    create | add | init SCRIPT_NAME             Create/Initialize the named BASH script
    delete | rem | kill | expunge SCRIPT_NAME   Delete/Remove the named BASH script. Will ask for verification.

  Options:
    -a, --admin     Use Admin/Multi-User mode
    -h, --help      Display this help
    -v, --version   Print out BASHimp version
 
BASHIMPOED`

##
# BASHimp Functions
#

create_script()
{
	exec > "${BASHIMP_PATH}/$BASHIMP_INIT"
	echo "#!/usr/bin/env bash"
	echo "###################"
	echo "# $BASHIMP_INIT v0.1.0"
	echo "#"
	echo
	echo
}

option_required()
{
	# echo "option_required() $1"
	if [ $1 -lt 2 ]; then
		echo "echo '  Missing value argument' 1>&2 && exit 3"
	else
		echo "shift 2"
	fi
}

shift_break()
{
	# echo "shift_break() $1"
	if [ $1 -gt 1 ]; then
		echo shift
	else
		echo break
	fi
}

show_codes()
{
	cat <<- _CAT_
	$BASHIMP_ERRORS
	_CAT_
}

show_help()
{
	cat <<- _CAT_
	$BASHIMP_HELP
	_CAT_
}


if [ $# -eq 0 ]; then
	show_help
	exit 1
fi

old_case=$(shopt nocasematch)
shopt -s nocasematch

# echo 'BASHimp Loop'
while [ $# -gt 0 ]
do
	case "$1" in
		help | -h | --help)
			show_help
			exit 0
			;;
		codes | errors)
			show_codes
			exit 0
			;;
		create | add | init)
			BASHIMP_INIT="$2"
			eval "$(option_required $#)"
			;;
		delete | rem | kill | expunge)
			BASHIMP_KILL="$2"
			eval "$(option_required $#)"
			;;
		-v | --version)
			echo $BASHIMP_VER_LABEL
			exit 0
			;;
		-a | --admin) # Admin Mode. Setup script for all users
			BASHIMP_ADMIN_MODE=true
			eval "$(shift_break $#)"
			;;
		--) # End of options
			shift
			break
			;;
		*)
			echo "Unknown option: $1" 1>&2
			exit 2
			;;
	esac
done

if [[ "$old_case" =~ nocasematch.+off ]]; then
	shopt -u nocasematch
fi

#
# Do some work
#
if [ ! -z "$BASHIMP_INIT" ]; then

	# Update Init Path if in Admin/Multi-User Mode
	if [ $BASHIMP_ADMIN_MODE == true ]; then
		if [ -d '/usr/local/bin' ]; then
			BASHIMP_PATH='/usr/local/bin' # The standard for multi-user scripts, no?
		elif [ -d '/usr/local/opt' ]; then
			BASHIMP_PATH='/usr/local/opt' # @see http://www.extellisys.com/articles/usr-local-opt
		elif [ -d '/opt/bin' ]; then
			BASHIMP_PATH='/opt/bin'       # I've seen this used somewhere...
		else
			BASHIMP_PATH='/usr/local/bin' # Create this if nothing else exists
		fi
	fi

	# Create bin directory if it doesn't already exist
	if [ ! -d "$BASHIMP_PATH" ]; then
		mkdir -p "$BASHIMP_PATH"
	fi

	# Create script or ask if it already exists
	if [ ! -f "${BASHIMP_PATH}/$BASHIMP_INIT" ]; then
		create_script
	else
		printf "  The file $BASHIMP_INIT already exists. Do you wish to continue? [yes/NO] (n) "
		overwrite='no'
		read overwrite
		case "$overwrite" in
		[Yy] | [Yy][Ee][Ss])
			echo "Overwriting $BASHIMP_INIT"
			create_script
			;;
		*)
			echo "Another time maybe..."
			exit 0
			;;
		esac
	fi

	# Fix permissions if not already executable
	if [ -f "${BASHIMP_PATH}/$BASHIMP_INIT" ] && [ ! -x "${BASHIMP_PATH}/$BASHIMP_INIT" ]; then
		chmod u+x "${BASHIMP_PATH}/$BASHIMP_INIT"
	fi

	# Launch script in editor
	if [ ! -z "$VISUAL" ]; then
		"$VISUAL" "${BASHIMP_PATH}/$BASHIMP_INIT"
	fi

elif [ ! -z "$BASHIMP_KILL" ]; then

	# Update Init Path if in Admin/Multi-User Mode
	if [ $BASHIMP_ADMIN_MODE == true ]; then
		if [ -d '/usr/local/bin' ]; then
			BASHIMP_PATH='/usr/local/bin' # The standard for multi-user scripts, no?
		elif [ -d '/usr/local/opt' ]; then
			BASHIMP_PATH='/usr/local/opt' # @see http://www.extellisys.com/articles/usr-local-opt
		elif [ -d '/opt/bin' ]; then
			BASHIMP_PATH='/opt/bin'       # I've seen this used somewhere...
		else
			BASHIMP_PATH='/usr/local/bin' # Create this if nothing else exists
		fi
	fi

	# Expunge script
	if [ -f "${BASHIMP_PATH}/${BASHIMP_KILL}" ]; then
		printf "  Are you sure you want to expunge $BASHIMP_KILL from this computer [yes/NO] (n) "
		read expunge
		case "$expunge" in
		[Yy] | [Yy][Ee][Ss])
			echo "Expunging ${BASHIMP_PATH}/${BASHIMP_KILL}"
			rm "${BASHIMP_PATH}/${BASHIMP_KILL}"
			;;
		*)
			echo "Another time maybe..."
			exit 0
			;;
		esac
	else
		echo "File not found"
		echo "Expected to find the script at ${BASHIMP_PATH}/${BASHIMP_KILL}"
		exit 4
	fi

fi

exit 0
